import datetime


class GitRepository:
    def __init__(self, repo_id, name, description):
        self.repo_id = repo_id
        self.name = name
        self.description = description

    def get_id(self):
        return self.repo_id

    def get_name(self):
        return self.name

    def get_description(self):
        return self.description

    def set_name(self, name):
        self.name = name

    def set_description(self, description):
        self.description = description


class CommitLog:
    def __init__(self, log_id, repo_id, commit_date, contributor):
        self.log_id = log_id
        self.repo_id = repo_id
        self.commit_date = commit_date
        self.contributor = contributor

    def get_id(self):
        return self.log_id

    def get_repo_id(self):
        return self.repo_id

    def get_commit_date(self):
        return self.commit_date

    def get_contributor(self):
        return self.contributor

    def set_commit_date(self, commit_date):
        self.commit_date = commit_date

    def set_contributor(self, contributor):
        self.contributor = contributor


class Contributor:
    def __init__(self, contrib_id, name, email):
        self.contrib_id = contrib_id
        self.name = name
        self.email = email

    def get_id(self):
        return self.contrib_id

    def get_name(self):
        return self.name

    def get_email(self):
        return self.email


# Repository Data Storage
repos = {}
commit_logs = {}
contributors = {}


def create_repo(repo_id, name, description):
    repo = GitRepository(repo_id, name, description)
    repos[repo_id] = repo


def delete_repo(repo_id):
    if repo_id in repos:
        del repos[repo_id]
    else:
        print("Repository not found!")


def get_repo(repo_id):
    return repos.get(repo_id)


def add_commit_log(repo_id, commit_date, contributor):
    if repo_id in repos:
        log_id = len(commit_logs)
        log = CommitLog(log_id, repo_id, commit_date, contributor)
        commit_logs[log_id] = log
    else:
        print("Repository not found!")


def delete_commit_log(log_id):
    if log_id in commit_logs:
        del commit_logs[log_id]
    else:
        print("Commit Log not found!")


def get_commit_log(log_id):
    return commit_logs.get(log_id)


def add_contributor(name, email):
    contrib_id = len(contributors)
    contributor = Contributor(contrib_id, name, email)
    contributors[contrib_id] = contributor


def delete_contributor(contrib_id):
    if contrib_id in contributors:
        del contributors[contrib_id]
    else:
        print("Contributor not found!")


def get_contributor(contrib_id):
    return contributors.get(contrib_id)



def visualize_commits_over_time(repo_id):
    commits_per_month = {}
    for log in commit_logs.values():
        if log.get_repo_id() == repo_id:
            commit_month = log.get_commit_date().month
            commits_per_month[commit_month] = commits_per_month.get(commit_month, 0) + 1

    print("Commits per month:", commits_per_month)


def identify_active_contributors(repo_id):
    active_contributors = {}
    today = datetime.date.today()
    one_month_ago = today - datetime.timedelta(weeks=4)
    for log in commit_logs.values():
        if log.get_repo_id() == repo_id and log.get_commit_date() >= one_month_ago:
            contributor_id = log.get_contributor().get_id()
            active_contributors[contributor_id] = active_contributors.get(contributor_id, 0) + 1
    print("Active Contributors:", active_contributors)
if __name__ == "__main__":
    create_repo(1, "Repo One", "First repository")
    create_repo(2, "Repo Two", "Second repository")
    add_contributor("sri", "sri@example.com")
    add_contributor("namu", "namu@example.com")
    today = datetime.date.today()
    add_commit_log(1, today, get_contributor(0))
    add_commit_log(1, today - datetime.timedelta(days=5), get_contributor(0))
    add_commit_log(1, today - datetime.timedelta(days=10), get_contributor(1))
    add_commit_log(2, today - datetime.timedelta(days=2), get_contributor(1))
    visualize_commits_over_time(1)
    identify_active_contributors(1)
